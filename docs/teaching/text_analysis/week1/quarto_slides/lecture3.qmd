---
title: "L3: Quarto Presentations"
from: markdown+emoji
format:
  clean-revealjs:
    self-contained: true
    footer: "Popescu (JCU): L3"
    embed-resources: true
author:
  - name: Bogdan G. Popescu
    orcid: 0000-0002-7730-7495
    email: bogdan.popescu@johncabot.edu
    affiliations: John Cabot University
---

## Introduction

Quarto supports a variety of formats for creating presentations, including:

::: fragment
- `revealjs` — [reveal.js](https://quarto.org/docs/presentations/revealjs/){target="_blank"}. (HTML)
- `pptx` — [PowerPoint](https://quarto.org/docs/presentations/powerpoint.html){target="_blank"} (MS Office)
- `beamer` - [Beamer](https://quarto.org/docs/presentations/beamer.html){target="_blank"} (LaTeX/PDF)
:::

::: fragment
The most capable format by far is `revealjs` which can be presented as HTML slides or can be printed to PDF for easier distribution
:::


## Quarto Document Structure
### YAML Header

- The YAML header defines the document metadata, such as title, author, date, and output format.


::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Statistical Analysis Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
---

# Introduction

This is an example.
```
:::


::: {.column width="49%"}
<iframe data-external="1" src="example1.html" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::



## Creating HTML Output
### Basic YAML Configuration

To generate an HTML file, specify format: `revealjs` in the YAML header.

Use `quarto render` in R to generate the output.



## Creating Slides

You can also divide slide shows into sections with title slides using a level 1 and level 2 header (`#`). For example:

::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Statistical Analysis Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
---

# Introduction
## Section 1

This is an example.
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example2.html#/section-1" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::


## Incremental Lists

This is how we create increamental lists

::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Statistical Analysis Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
    incremental: true
---

## Section 1

- This is an example
- This is another example.
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example3.html#/section-1" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::



## Incremental Lists

We can obtain the same output in the following way:

::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Statistical Analysis Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
---

## Section 1

::: {.incremental}
- This is an example
- This is another example.
:::
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example3.html#/section-1" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::


## Multiple Columns

To put material in side by side columns, you can use a native div container with class `.columns`

::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Statistical Analysis Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
---

## Section 1

:::: {.columns}

::: {.column width="40%"}
Left column
:::

::: {.column width="60%"}
Right column
:::

::::
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example4.html#/section-1" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::


## Content Overflow

If you have a slide that has more content than can be displayed on a single frame there are two slide-level classes you can apply to mitigate this:

::: columns
::: {.column width="49%"}
1. Using `.smaller`

```{.yaml}
## Slide Title (with `.smaller`){.smaller}

- Point 1
- Point 2
```

:::

::: {.column width="49%"}
<iframe data-external="1" src="example5.html#/slide-title-with-.smaller" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::


## Content Overflow

If you have a slide that has more content than can be displayed on a single frame there are two slide-level classes you can apply to mitigate this:

::: columns
::: {.column width="49%"}
2. Use the `.scrollable` class to make off-slide content available by scrolling.

```{.yaml}
## Slide Title {.scrollable}

- Point 1
- Point 2
- Point 3
- Point 4
- Point 5
- Point 6
- Point 7
- Point 8
- Point 9
- Point 10
- Point 11
- Point 12
```

:::

::: {.column width="49%"}
<iframe data-external="1" src="example6.html#/slide-title" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::

## Themes

There are 11 built-in themes provided for Reveal presentations (you can also create your own themes).

::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
theme: dark
---
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example_dark.html" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::


## Themes

There are 11 built-in themes provided for Reveal presentations (you can also create your own themes).

::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
theme: blood
---
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example_blood.html" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::



## Themes

There are 11 built-in themes provided for Reveal presentations (you can also create your own themes).

::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
theme: beige
---
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example_beige.html" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::


## Themes

There are 11 built-in themes provided for Reveal presentations (you can also create your own themes).

::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
theme: league
---
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example_league.html" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::


## Themes{.smaller}

Other themes include:

- beige
- blood
- dark
- default
- league
- moon
- night
- serif
- simple
- sky
- solarized


## Themes

You can also create your own theme if you play around with css

::: columns
::: {.column width="49%"}
::: fragment
<iframe data-external="1" src="earth.html" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::

::: {.column width="49%"}
::: fragment
For this one, I downloaded [https://github.com/EmilHvitfeldt/quarto-revealjs-earth](https://github.com/EmilHvitfeldt/quarto-revealjs-earth){target="_blank"}
:::
:::
:::

## Slide Backgrounds

::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Statistical Analysis Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
---

## Slide Title {background-color="aquamarine"}
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example8.html#/slide-title" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::



## Slide Gradient Backgrounds

::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Statistical Analysis Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
---

## Slide Title {background-gradient="radial-gradient(#283b95, #17b2c3)"}
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example9.html#/slide-title" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::


## Image Backgrounds

By default, background images are resized to cover the full page.

You need to have `slide_background.png` inside figures.


::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Statistical Analysis Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
---

## Slide Title {background-image="figures\slide_background.png"}
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example10.html#/slide-title" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::


## Video Backgrounds

Occasionally, you may want to have a video in the background. Note that you need to edit the video so that it takes as little space as possible.


::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Statistical Analysis Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
---

#  {background-video="video/izma3.mp4" background-size="1200px" visibility="uncounted"}
::: footer

:::
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example11.html" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::



## Website Backgrounds

You can easily have website backgrounds in the following way:


::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Statistical Analysis Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
---

## {background-iframe="https://quarto.org"}

```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example12.html#/section" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::



## Footer & Logo

You can include footer text and a logo at the bottom of each slide using the `footer` and `logo` options. For example:

::: columns
::: {.column width="49%"}
```{.yaml}
---
title: "Statistical Analysis Presentation"
author: "Your Name"
date: "2024-11-05"
format: revealjs
logo: quarto.png
footer: "Footer text"
---
```
:::

::: {.column width="49%"}
<iframe data-external="1" src="example7.html" width="500" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>
:::
:::

## Code Blocks in Python

You may want to highlight specific lines of code output

```{r}
reticulate::use_python("/opt/anaconda3/bin/python", required = TRUE)
```

The following will highlight code 1-4 and 6-11

::: columns
::: {.column width="49%"}

````
```{{python, filename="Python", echo=TRUE, eval=TRUE}}
#| code-line-numbers: "1-4|6-11"
from collections import Counter
import pandas as pd
from pretty_html_table import build_table
from IPython.display import display, HTML

# Input texts
texts = {
    "text_1": "I love playing football.",
    "text_2": "I hate basketball.",
    "text_3": "When I was a kid I was playing football."
}
```
````
:::

::: {.column width="49%"}
```{python, filename="Python", echo=TRUE, eval=TRUE}
#| code-line-numbers: "1-4|6-11"
from collections import Counter
import pandas as pd
from pretty_html_table import build_table
from IPython.display import display, HTML

# Input texts
texts = {
    "text_1": "I love playing football.",
    "text_2": "I hate basketball.",
    "text_3": "When I was a kid I was playing football."
}
```
:::
:::



## Code Blocks in R

You may want to highlight specific lines of code output

```{r}
reticulate::use_python("/opt/anaconda3/bin/python", required = TRUE)
```

The following will highlight code 2,3,4

::: columns
::: {.column width="49%"}

````
```{{r, filename="R", echo=TRUE, eval=TRUE}}
#| code-line-numbers: "2|3|4"
# Input texts
text_1 <- "I love playing football."
text_2 <- "I hate basketball."
text_3 <- "When I was a kid I was playing football."
```
````
:::

::: {.column width="49%"}
```{r, filename="R", echo=TRUE, eval=TRUE}
#| code-line-numbers: "2|3|4"
# Input texts
text_1 <- "I love playing football."
text_2 <- "I hate basketball."
text_3 <- "When I was a kid I was playing football."
```

:::
:::


## Code Blocks in R

As you might guess:

- `echo` can have two values
  - `TRUE` - code is visible
  - `FALSE` - code is not visible
  
- `eval` has two values:
  - `TRUE` - code is executed
  - `FALSE` - code is not executed


## Code Blocks in R
### Examples

`echo=TRUE`

::: fragment
You can see the code and the code is executed automatically.
:::

::: fragment
::: columns
::: {.column width="49%"}
````
```{{r, filename="R", echo=TRUE}}
text_1 <- "I love playing football."
print(text_1)
```
````
:::

::: {.column width="49%"}
```{r, filename="R", echo=TRUE}
text_1 <- "I love playing football."
print(text_1)
```

:::
:::
:::

::: fragment
`echo=FALSE`
:::

::: fragment
You cannot see the code and the code is executed automatically.
:::

::: fragment
::: columns
::: {.column width="49%"}
````
```{{r, filename="R", echo=FALSE}}
text_1 <- "I love playing football."
print(text_1)
```
````
:::

::: {.column width="49%"}
```{r, filename="R", echo=FALSE}
text_1 <- "I love playing football."
print(text_1)
```

:::
:::
:::



## Code Blocks in R
### Examples

`eval=FALSE`

::: fragment
You can see the code and the code is not executed.
:::

::: fragment
::: columns
::: {.column width="49%"}
````
```{{r, filename="R", echo=TRUE, eval=FALSE}}
text_1 <- "I love playing football."
print(text_1)
```
````
:::

::: {.column width="49%"}
```{r, filename="R", echo=TRUE, eval=FALSE}
text_1 <- "I love playing football."
print(text_1)
```

:::
:::
:::

::: fragment
`eval=TRUE`
:::

::: fragment
You can see the code and the code is executed.
:::

::: fragment
::: columns
::: {.column width="49%"}
````
```{{r, filename="R", echo=TRUE, eval=TRUE}}
text_1 <- "I love playing football."
print(text_1)
```
````
:::

::: {.column width="49%"}
```{r, filename="R", echo=TRUE, eval=TRUE}
text_1 <- "I love playing football."
print(text_1)
```

:::
:::
:::


## Code Blocks in R
### Examples

`echo=TRUE` and `eval=TRUE`

This is most useful when we have graphs

::: fragment
::: columns
::: {.column width="49%"}
````
```{{r, filename="R", echo=FALSE, eval=TRUE}}
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg)) + 
  geom_point()+
  geom_smooth(method=lm)
```
````
:::

::: {.column width="49%"}
```{r, filename="R", echo=FALSE, eval=TRUE}
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg)) + 
  geom_point()+
  geom_smooth(method=lm)
```

:::
:::
:::

## Conclusion

There are a variety of ways to customize your Quarto Presentations

Checkout the [Quarto Presentation Guide](https://quarto.org/docs/presentations/){target="_blank"}

Other resources:

- [Get Started with Quarto](https://rstudio-conf-2022.github.io/get-started-quarto/materials/05-presentations.html#/presentations){target="_blank"}
- [Revealjs Presentations](https://quarto.org/docs/presentations/revealjs/demo/#/title-slide){target="_blank"}
- [Beautiful Presentations with R and Quarto](https://www.youtube.com/watch?v=01KifhHDkFk){target="_blank"}
- [Stunning Presentations with Quarto](https://emilhvitfeldt.github.io/talk-jsm-stunning-presentations/#/section){target="_blank"}

There are many examples out there. The world is your oyster!


